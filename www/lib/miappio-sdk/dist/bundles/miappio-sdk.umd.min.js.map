{"version":3,"file":"miappio-sdk.umd.min.js","sources":["~/miappio-sdk/src/version/index.ts","~/miappio-sdk/src/tools/base64.ts","~/miappio-sdk/src/tools/storage.ts","~/miappio-sdk/src/tools/xor.ts","~/miappio-sdk/src/connection/xhrpromise.ts","~/miappio-sdk/src/connection/ajax.ts","~/miappio-sdk/src/connection/client.ts","~/miappio-sdk/src/connection/connection.ts","~/miappio-sdk/src/session/session.ts","~/miappio-sdk/src/sdk/internal.service.ts","~/miappio-sdk/src/sdk/angular.service.ts","~/miappio-sdk/src/sdk/miapp.module.ts"],"sourcesContent":["// bumped version via gulp\nexport const /** @type {?} */ version = '2.0.19';\n","\nexport class Base64 {\nconstructor() {\n    };\n/**\n * Decodes string from Base64 string\n * @param {?} input\n * @return {?}\n */\npublic static encode(input: string): string {\n\n        if (!input) { return null; }\n\n        return btoa(encodeURIComponent(input).replace(/%([0-9A-F]{2})/g,\n            function toSolidBytes(match, p1) {\n                return String.fromCharCode(parseInt('0x' + p1, 16));\n            }));\n\n    }\n/**\n * @param {?} input\n * @return {?}\n */\npublic static decode(input: string): string {\n\n        if (!input) { return null; }\n\n        return decodeURIComponent(atob(input).split('').map(function (c) {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n\n    }\n}\n","\n/**\n * localStorage class factory\n * Usage : var LocalStorage = miapp.LocalStorageFactory(window.localStorage); // to create a new class\n * Usage : var localStorageService = new LocalStorage(); // to create a new instance\n */\nexport class LocalStorage {\npublic version = '0.1';\nprivate storage;\n/**\n * @param {?} storageService\n * @param {?} storageKey\n */\nconstructor(storageService,\nprivate storageKey) {\n        this.storage = storageService || window.localStorage;\n        if (!this.storage) {\n            throw new Error('miapp.LocalStorageFactory needs a storageService!');\n        }\n        /* todo huge refacto\n                    if (!miapp.Xml) {\n                        throw new Error('miapp.Xml needs to be loaded before miapp.LocalStorage!');\n                    }\n                    if (!miapp.Json) {\n                        throw new Error('miapp.Json needs to be loaded before miapp.LocalStorage!');\n                    }\n                    if (!miapp.Xml.isXml || !miapp.Xml.xml2String || !miapp.Xml.string2Xml) {\n                        throw new Error('miapp.Xml with isXml(), xml2String() and string2Xml() needs to be loaded before miapp.LocalStorage!');\n                    }\n                    if (!miapp.Json.object2String || !miapp.Json.string2Object) {\n                        throw new Error('miapp.Json with object2String() and string2Object() needs to be loaded before miapp.LocalStorage!');\n                    }\n                    */\n    }\n/**\n * Sets a key's value.\n * \n *              a string an exception is raised.\n *              compatible (Numbers, Strings, Objects etc.).\n * @param {?} key\n * @param {?} value\n * @return {?} the stored value which is a container of user value.\n */\nset(key, value) {\n\n        key = this.storageKey + key;\n        this.checkKey(key);\n        // clone the object before saving to storage\n        const /** @type {?} */ t = typeof(value);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: value})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: value});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: value});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: value});\n        } else {\n            // reject and do not insert\n            // if (typeof value == \"function\") for example\n            throw new TypeError('Value type ' + t + ' is invalid. It must be null, undefined, xml, string, number, boolean or object');\n        }\n        this.storage.setItem(key, value);\n        return value;\n    };\n/**\n * Looks up a key in cache\n * \n * @param {?} key\n * @param {?=} def\n * @return {?} the key value, default value or <null>\n */\nget(key, def?) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const /** @type {?} */ item = this.storage.getItem(key);\n        if (item !== null) {\n            if (item === 'null') {\n                return null;\n            }\n            const /** @type {?} */ value = JSON.parse(item);\n            /* todo\n            var value = miapp.Json.string2Object(item);\n            if ('xml' in value) {\n                return miapp.Xml.string2Xml(value.xml);\n            } else  */\n            if ('string' in value) {\n                return value.string;\n            } else if ('number' in value) {\n                return value.number.valueOf();\n            } else if ('bool' in value) {\n                return value.bool.valueOf();\n            } else {\n                return value.json;\n            }\n        }\n        return !def ? null : def;\n    };\n/**\n * Deletes a key from cache.\n * \n * @param {?} key\n * @return {?} true if key existed or false if it didn't\n */\nremove(key) {\n        key = this.storageKey + key;\n        this.checkKey(key);\n        const /** @type {?} */ existed = (this.storage.getItem(key) !== null);\n        this.storage.removeItem(key);\n        return existed;\n    };\n/**\n * Deletes everything in cache.\n * \n * @return {?} true\n */\nclear() {\n        const /** @type {?} */ existed = (this.storage.length > 0);\n        this.storage.clear();\n        return existed;\n    };\n/**\n * How much space in bytes does the storage take?\n * \n * @return {?} Number\n */\nsize() {\n        return this.storage.length;\n    };\n/**\n * Call function f on the specified context for each element of the storage\n * from index 0 to index length-1.\n * WARNING : You should not modify the storage during the loop !!!\n * \n * @param {?} f\n * @param {?} context\n * @return {?} Number of items in storage\n */\nforeach(f, context) {\n        const /** @type {?} */ n = this.storage.length;\n        for (let /** @type {?} */ i = 0; i < n; i++) {\n            const /** @type {?} */ key = this.storage.key(i);\n            const /** @type {?} */ value = this.get(key);\n            if (context) {\n                // f is an instance method on instance context\n                f.call(context, value);\n            } else {\n                // f is a function or class method\n                f(value);\n            }\n        }\n        return n;\n    };\n/**\n * @param {?} key\n * @return {?}\n */\nprivate checkKey(key) {\n        if (!key || (typeof key !== 'string')) {\n            throw new TypeError('Key type must be string');\n        }\n        return true;\n    }\n}\n\nfunction LocalStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalStorage.prototype.version;\n/** @type {?} */\nLocalStorage.prototype.storage;\n/** @type {?} */\nLocalStorage.prototype.storageKey;\n}\n\n","import {Base64} from './base64';\nexport class Xor {\nconstructor() {\n    };\n/**\n * @param {?} value\n * @param {?} key\n * @return {?}\n */\npublic static encrypt(value: string, key: string): string {\n\n        let /** @type {?} */ result = '';\n        for (let /** @type {?} */ i = 0; i < value.length; i++) {\n            result += String.fromCharCode(( /** @type {?} */((value[i].charCodeAt(0).toString(10) as any))) ^ Xor.keyCharAt(key, i));\n        }\n        return Base64.encode(result);\n    };\n/**\n * @param {?} value\n * @param {?} key\n * @return {?}\n */\npublic static decrypt(value: string, key: string): string {\n        let /** @type {?} */ result = '';\n        value = Base64.decode(value);\n        for (let /** @type {?} */ i = 0; i < value.length; i++) {\n            result += String.fromCharCode(( /** @type {?} */((value[i].charCodeAt(0).toString(10) as any))) ^ Xor.keyCharAt(key, i));\n        }\n        return result;\n    }\n/**\n * @param {?} key\n * @param {?} i\n * @return {?}\n */\npublic static keyCharAt(key, i) {\n        return key[Math.floor(i % key.length)].charCodeAt(0).toString(10);\n    }\n\n\n}\n","\nexport class XHRPromise {\npublic DEFAULT_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';\nprivate _xhr;\nprivate _unloadHandler: any;\nconstructor() {};\n/**\n * @param {?} options\n * @return {?}\n */\nsend(options): Promise<any> {\n        let /** @type {?} */ defaults;\n        if (options == null) {\n            options = {};\n        }\n        defaults = {\n            method: 'GET',\n            data: null,\n            headers: {},\n            async: true,\n            username: null,\n            password: null,\n            withCredentials: false\n        };\n        options = Object.assign({}, defaults, options);\n        return new Promise((function (_this: XHRPromise) {\n            return function (resolve, reject) {\n                let /** @type {?} */ e, /** @type {?} */ header, /** @type {?} */ ref, /** @type {?} */ value, /** @type {?} */ xhr;\n                if (!XMLHttpRequest) {\n                    _this._handleError('browser', reject, null, 'browser doesn\\'t support XMLHttpRequest');\n                    return;\n                }\n                if (typeof options.url !== 'string' || options.url.length === 0) {\n                    _this._handleError('url', reject, null, 'URL is a required parameter');\n                    return;\n                }\n                _this._xhr = xhr = new XMLHttpRequest;\n                xhr.onload = function () {\n                    let /** @type {?} */ responseText;\n                    _this._detachWindowUnload();\n                    try {\n                        responseText = _this._getResponseText();\n                    } catch ( /** @type {?} */_error) {\n                        _this._handleError('parse', reject, null, 'invalid JSON response');\n                        return;\n                    }\n                    return resolve({\n                        url: _this._getResponseUrl(),\n                        status: xhr.status,\n                        statusText: xhr.statusText,\n                        responseText: responseText,\n                        headers: _this._getHeaders(),\n                        xhr: xhr\n                    });\n                };\n                xhr.onerror = function () {\n                    return _this._handleError('error', reject);\n                };\n                xhr.ontimeout = function () {\n                    return _this._handleError('timeout', reject);\n                };\n                xhr.onabort = function () {\n                    return _this._handleError('abort', reject);\n                };\n                _this._attachWindowUnload();\n                xhr.open(options.method, options.url, options.async, options.username, options.password);\n                if (options.withCredentials) {\n                    xhr.withCredentials = true;\n                }\n                if ((options.data != null) && !options.headers['Content-Type']) {\n                    options.headers['Content-Type'] = _this.DEFAULT_CONTENT_TYPE;\n                }\n                ref = options.headers;\n                for (header in ref) {\n                    if (ref.hasOwnProperty(header)) {\n                        value = ref[header];\n                        xhr.setRequestHeader(header, value);\n                    }\n                }\n                try {\n                    return xhr.send(options.data);\n                } catch ( /** @type {?} */_error) {\n                    e = _error;\n                    return _this._handleError('send', reject, null, e.toString());\n                }\n            };\n        })(this));\n    };\n/**\n * @return {?}\n */\ngetXHR() {\n        return this._xhr;\n    };\n/**\n * @return {?}\n */\nprivate _attachWindowUnload() {\n        this._unloadHandler = this._handleWindowUnload.bind(this);\n        if (( /** @type {?} */((window as any))).attachEvent) {\n            return ( /** @type {?} */((window as any))).attachEvent('onunload', this._unloadHandler);\n        }\n    };\n/**\n * @return {?}\n */\nprivate _detachWindowUnload() {\n        if (( /** @type {?} */((window as any))).detachEvent) {\n            return ( /** @type {?} */((window as any))).detachEvent('onunload', this._unloadHandler);\n        }\n    };\n/**\n * @return {?}\n */\nprivate _getHeaders() {\n        return this._parseHeaders(this._xhr.getAllResponseHeaders());\n    };\n/**\n * @return {?}\n */\nprivate _getResponseText() {\n        let /** @type {?} */ responseText;\n        responseText = typeof this._xhr.responseText === 'string' ? this._xhr.responseText : '';\n        switch ((this._xhr.getResponseHeader('Content-Type') || '').split(';')[0]) {\n            case 'application/json':\n            case 'text/javascript':\n                responseText = JSON.parse(responseText + '');\n        }\n        return responseText;\n    };\n/**\n * @return {?}\n */\nprivate _getResponseUrl() {\n        if (this._xhr.responseURL != null) {\n            return this._xhr.responseURL;\n        }\n        if (/^X-Request-URL:/m.test(this._xhr.getAllResponseHeaders())) {\n            return this._xhr.getResponseHeader('X-Request-URL');\n        }\n        return '';\n    };\n/**\n * @param {?} reason\n * @param {?} reject\n * @param {?=} status\n * @param {?=} statusText\n * @return {?}\n */\nprivate _handleError(reason, reject, status?, statusText?) {\n        this._detachWindowUnload();\n        return reject({\n            reason: reason,\n            status: status || this._xhr.status,\n            statusText: statusText || this._xhr.statusText,\n            xhr: this._xhr\n        });\n    };\n/**\n * @return {?}\n */\nprivate _handleWindowUnload() {\n        return this._xhr.abort();\n    };\n/**\n * @param {?} str\n * @return {?}\n */\nprivate trim(str) {\n        return str.replace(/^\\s*|\\s*$/g, '');\n    }\n/**\n * @param {?} arg\n * @return {?}\n */\nprivate isArray(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n/**\n * @param {?} list\n * @param {?} iterator\n * @return {?}\n */\nprivate forEach(list, iterator) {\n        if (toString.call(list) === '[object Array]') {\n            this.forEachArray(list, iterator, this)\n        } else if (typeof list === 'string') {\n            this.forEachString(list, iterator, this)\n        } else {\n            this.forEachObject(list, iterator, this)\n        }\n    }\n/**\n * @param {?} array\n * @param {?} iterator\n * @param {?} context\n * @return {?}\n */\nprivate forEachArray(array, iterator, context) {\n        for (let /** @type {?} */ i = 0, /** @type {?} */ len = array.length; i < len; i++) {\n            if (array.hasOwnProperty(i)) {\n                iterator.call(context, array[i], i, array)\n            }\n        }\n    }\n/**\n * @param {?} string\n * @param {?} iterator\n * @param {?} context\n * @return {?}\n */\nprivate forEachString(string, iterator, context) {\n        for (let /** @type {?} */ i = 0, /** @type {?} */ len = string.length; i < len; i++) {\n            // no such thing as a sparse string.\n            iterator.call(context, string.charAt(i), i, string)\n        }\n    }\n/**\n * @param {?} object\n * @param {?} iterator\n * @param {?} context\n * @return {?}\n */\nprivate forEachObject(object, iterator, context) {\n        for (const /** @type {?} */ k in object) {\n            if (object.hasOwnProperty(k)) {\n                iterator.call(context, object[k], k, object)\n            }\n        }\n    }\n/**\n * @param {?} headers\n * @return {?}\n */\nprivate _parseHeaders(headers) {\n        if (!headers) {\n            return {};\n        }\n\n        const /** @type {?} */ result = {};\n\n        this.forEach(\n            this.trim(headers).split('\\n')\n            , (row) => {\n                const /** @type {?} */ index = row.indexOf(':')\n                    , /** @type {?} */ key = this.trim(row.slice(0, index)).toLowerCase()\n                    , /** @type {?} */ value = this.trim(row.slice(index + 1));\n\n                if (typeof(result[key]) === 'undefined') {\n                    result[key] = value\n                } else if (this.isArray(result[key])) {\n                    result[key].push(value)\n                } else {\n                    result[key] = [result[key], value]\n                }\n            }\n        );\n\n        return result;\n    }\n\n\n}\n\nfunction XHRPromise_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRPromise.prototype.DEFAULT_CONTENT_TYPE;\n/** @type {?} */\nXHRPromise.prototype._xhr;\n/** @type {?} */\nXHRPromise.prototype._unloadHandler;\n}\n\n","import {XHRPromise} from './xhrpromise';\n\nexport interface XhrOptionsInterface {\n    url: string,\n    data?: any,\n    headers?: any,\n    async?: boolean,\n    username?: string,\n    password?: string,\n    withCredentials?: boolean\n}\nexport class Ajax {\nprivate xhr: XHRPromise;\nconstructor() {\n        this.xhr = new XHRPromise();\n    };\n/**\n * @param {?} args\n * @return {?}\n */\npublic post(args: XhrOptionsInterface): Promise<any> {\n\n        const /** @type {?} */ opt: any = {\n            method: 'POST',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                // console.log('res:', res);\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            });\n    }\n/**\n * @param {?} args\n * @return {?}\n */\npublic put(args: XhrOptionsInterface): Promise<any> {\n        const /** @type {?} */ opt: any = {\n            method: 'PUT',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                // console.log('res:', res);\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            });\n    }\n/**\n * @param {?} args\n * @return {?}\n */\npublic delete(args: XhrOptionsInterface): Promise<any> {\n        const /** @type {?} */ opt: any = {\n            method: 'DELETE',\n            url: args.url,\n            data: JSON.stringify(args.data)\n        };\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                // console.log('res:', res);\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            });\n    }\n/**\n * @param {?} args\n * @return {?}\n */\npublic get(args: XhrOptionsInterface): Promise<any> {\n        const /** @type {?} */ opt: any = {\n            method: 'GET',\n            url: args.url\n        };\n        if (args.data) {\n            opt.data = args.data;\n        }\n        if (args.headers) {\n            opt.headers = args.headers;\n        }\n        // console.log('send:', opt);\n        return this.xhr\n            .send(opt)\n            .then(res => {\n                // console.log('res:', res);\n                if (res.status &&\n                    (parseInt(res.status, 10) < 200 || parseInt(res.status, 10) >= 300)) {\n                    res.reason = 'status';\n                    return Promise.reject(res);\n                }\n                return Promise.resolve(res.responseText);\n            });\n    }\n}\n\nfunction Ajax_tsickle_Closure_declarations() {\n/** @type {?} */\nAjax.prototype.xhr;\n}\n\n","import {Ajax} from './ajax';\nimport {LocalStorage} from '../tools/storage';\nimport {SdkInterface} from '../sdk/interfaces';\nexport class Client {\npublic clientId: string;\nprivate clientUuid: string;\nprivate clientInfo: string;\nprivate refreshToken: string;\nprivate static refreshCount = 0;\n/**\n * @param {?} appId\n * @param {?} URI\n * @param {?} storage\n * @param {?} sdk\n */\nconstructor(private appId: string,\nprivate URI: string,\nprivate storage: LocalStorage,\nprivate sdk: SdkInterface) {\n\n        let uuid: string = this.storage.get('uuid') || 'uuid-' + Math.random();\n        let info: string = this.storage.get('info');\n        if (!info && window && window.navigator) {\n            info = window.navigator.appName + '@' + window.navigator.appVersion + '-' + window.navigator.userAgent;\n        }\n        if (window && window['device'] && window['device'].uuid) {\n            uuid = window['device'].uuid;\n        }\n        this.setClientUuid(uuid);\n        this.setClientInfo(info);\n        this.refreshToken = this.storage.get('refreshToken');\n        this.clientId = this.storage.get('clientId');\n    };\n/**\n * @param {?} value\n * @return {?}\n */\npublic setClientId(value: string) {\n        this.clientId = value;\n        this.storage.set('clientId', this.clientId);\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic setClientUuid(value: string) {\n        this.clientUuid = value;\n        this.storage.set('clientUuid', this.clientUuid);\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic setClientInfo(value: string) {\n        this.clientInfo = value;\n        // this.storage.set('clientInfo', this.clientInfo);\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic setRefreshToken(value: string) {\n        this.refreshToken = value;\n        this.storage.set('refreshToken', this.refreshToken);\n    }\n/**\n * @param {?} login\n * @param {?} password\n * @param {?=} updateProperties\n * @return {?}\n */\npublic login(login: string, password: string, updateProperties?: any): Promise<any> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, msg: 'no api uri'});\n        }\n\n        const /** @type {?} */ urlLogin = this.URI + '/users';\n        const /** @type {?} */ dataLogin = {\n            name: login,\n            username: login,\n            email: login,\n            password: password\n        };\n\n        return new Ajax()\n            .post({\n                url: urlLogin,\n                data: dataLogin,\n                headers: {'Content-Type': 'application/json', 'Accept': 'text/json'}\n            })\n            .then(createdUser => {\n\n                this.setClientId(createdUser._id);\n                const /** @type {?} */ urlToken = this.URI + '/oauth/token';\n                const /** @type {?} */ dataToken = {\n                    grant_type: 'client_credentials',\n                    client_id: this.clientId,\n                    client_secret: password,\n                    client_udid: this.clientUuid,\n                    client_info: this.clientInfo,\n                    audience: this.appId,\n                    scope: JSON.stringify(this.sdk)\n                };\n                return new Ajax()\n                    .post({\n                        url: urlToken,\n                        data: dataToken,\n                        headers: {'Content-Type': 'application/json', 'Accept': 'text/json'}\n                    });\n            });\n    }\n/**\n * @return {?}\n */\npublic reAuthenticate(): Promise<any> {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, msg: 'no api uri'});\n        }\n        const /** @type {?} */ url = this.URI + '/oauth/token';\n        const /** @type {?} */ data = {\n            grant_type: 'refresh_token',\n            client_id: this.clientId,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            audience: this.appId,\n            scope: JSON.stringify(this.sdk),\n            refresh_token: this.refreshToken,\n            refresh_extra: Client.refreshCount++,\n        };\n        return new Ajax()\n            .post({\n                url: url,\n                data: data,\n                headers: {'Content-Type': 'application/json', 'Accept': 'text/json'}\n            });\n    }\n/**\n * @return {?}\n */\npublic logout() {\n\n        if (!this.URI) {\n            console.error('no api uri');\n            return Promise.reject({code: 408, msg: 'no api uri'});\n        }\n\n        const /** @type {?} */ url = this.URI + '/oauth/revoke';\n\n        if (!this.refreshToken || !this.clientId) {\n            return Promise.resolve();\n        }\n\n        const /** @type {?} */ data = {\n            token: this.refreshToken,\n            client_id: this.clientId,\n            client_udid: this.clientUuid,\n            client_info: this.clientInfo,\n            audience: this.appId,\n            scope: JSON.stringify(this.sdk)\n        };\n\n        this.setRefreshToken(null);\n        Client.refreshCount = 0;\n\n        return new Ajax()\n            .post({\n                url: url,\n                data: data,\n                headers: {'Content-Type': 'application/json', 'Accept': 'text/json'}\n            });\n    }\n/**\n * @return {?}\n */\npublic isReady(): boolean {\n        return !!this.URI;\n    }\n}\n\nfunction Client_tsickle_Closure_declarations() {\n/** @type {?} */\nClient.refreshCount;\n/** @type {?} */\nClient.prototype.clientId;\n/** @type {?} */\nClient.prototype.clientUuid;\n/** @type {?} */\nClient.prototype.clientInfo;\n/** @type {?} */\nClient.prototype.refreshToken;\n/** @type {?} */\nClient.prototype.appId;\n/** @type {?} */\nClient.prototype.URI;\n/** @type {?} */\nClient.prototype.storage;\n/** @type {?} */\nClient.prototype.sdk;\n}\n\n","import {LocalStorage} from '../tools/storage';\nimport {Client} from './client';\nimport * as tools from '../tools';\nimport {ModuleServiceLoginOptionsInterface, SdkInterface} from '../sdk/interfaces';\nimport * as connection from './index';\nexport class Connection {\npublic miappId: string;\npublic miappVersion: string;\npublic miappCrypto: boolean;\nprivate _cryptoSalt: string;\nprivate _client: Client;\nprivate _user: any;\npublic accessToken: string;\npublic idToken: string;\npublic refreshToken: string;\npublic states: { [s: string]: { state: boolean, time: number }; };\npublic endpoints: Array<string>;\npublic accessTokenPrevious: string;\n/**\n * @param {?} _sdk\n * @param {?} _storage\n */\nconstructor(private _sdk: SdkInterface,\nprivate _storage: LocalStorage) {\n        this._client = null;\n        this._user = null;\n        this._cryptoSalt = this._storage.get('_cryptoSalt') || null;\n\n        this.accessToken = this._storage.get('accessToken') || null;\n        this.accessTokenPrevious = this._storage.get('accessTokenPrevious') || null;\n        this.idToken = this._storage.get('idToken') || null;\n        this.refreshToken = this._storage.get('refreshToken') || null;\n        this.states = this._storage.get('states') || {};\n        this.endpoints = [];\n    };\n/**\n * @return {?}\n */\nisReady(): boolean {\n        return !!this._client && this._client.isReady();\n    }\n/**\n * @return {?}\n */\ndestroy(): void {\n\n        this._storage.remove('accessToken');\n        this._storage.remove('idToken');\n        this._storage.remove('refreshToken');\n        this._storage.remove('states');\n        this._storage.remove('_cryptoSalt');\n        // Backup - do not remove : this._storage.remove('accessTokenPrevious');\n        if (this.accessToken) {\n            this.accessTokenPrevious = this.accessToken;\n            this._storage.set('accessTokenPrevious', this.accessTokenPrevious);\n        }\n\n        this._user = null;\n        if (this._client) {\n            this._client.setClientId(null);\n        }\n        this.accessToken = null;\n        this.idToken = null;\n        this.refreshToken = null;\n        this.states = {}; // new Map<string, boolean>();\n    }\n/**\n * @param {?} client\n * @return {?}\n */\nsetClient(client: Client): void {\n\n        this._client = client;\n        if (!this._user) {\n            this._user = {};\n        }\n\n        this._user._id = this._client.clientId;\n        this._user._name = JSON.parse(this.getIdPayload({name: ''})).name;\n    }\n/**\n * @param {?} user\n * @return {?}\n */\nsetUser(user: any): void {\n        this._user = user;\n        if (this._user._id) {\n            this._client.setClientId(this._user._id)\n        }\n    }\n/**\n * @return {?}\n */\ngetUser(): any {\n        return this._user;\n    }\n/**\n * @return {?}\n */\ngetUserId(): any {\n        return this._user ? this._user._id : null;\n    }\n/**\n * @return {?}\n */\ngetClient(): Client {\n        return this._client;\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nsetCryptoSalt(value: string) {\n        // this.miappCrypto = true;\n        this._cryptoSalt = value;\n        this._storage.set('_cryptoSalt', this._cryptoSalt);\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nencrypt(data: any): string {\n\n        if (typeof data !== 'string') {\n            data = JSON.stringify(data);\n        }\n\n        if (this.miappCrypto && this._cryptoSalt) {\n            // const key = '' + this.miappId + '' + this.getClientId();\n            const /** @type {?} */ key = this._cryptoSalt;\n            return tools.Xor.encrypt(data, key);\n        } else {\n            return data;\n        }\n    }\n/**\n * @param {?} data\n * @return {?}\n */\ndecrypt(data: string): any {\n        let /** @type {?} */ decrypted = data;\n        if (this.miappCrypto && this._cryptoSalt) {\n            // const key = '' + this.miappId + '' + this.getClientId();\n            const /** @type {?} */ key = this._cryptoSalt;\n            decrypted = tools.Xor.decrypt(data, key);\n        }\n        try {\n            decrypted = JSON.parse(decrypted);\n        } catch ( /** @type {?} */err) {\n        }\n\n        return decrypted;\n    }\n/**\n * @return {?}\n */\nisLogin() {\n        let /** @type {?} */ exp = true;\n        try {\n\n            const /** @type {?} */ payload = this.refreshToken.split('.')[1];\n            const /** @type {?} */ decoded = JSON.parse(tools.Base64.decode(payload));\n            exp = ((new Date().getTime() / 1000) >= decoded.exp);\n\n        } catch ( /** @type {?} */e) {\n        }\n        return !exp;\n    };\n/**\n * @return {?}\n */\ngetClientId(): string {\n        if (!this._client) {\n            return null;\n        }\n        return this._client.clientId;\n    }\n/**\n * @param {?=} def\n * @return {?}\n */\ngetIdPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const /** @type {?} */ payload = this.idToken.split('.')[1];\n            if (payload) {\n                return tools.Base64.decode(payload);\n            }\n        } catch ( /** @type {?} */e) {\n        }\n        return def ? def : null;\n    }\n/**\n * @param {?=} def\n * @return {?}\n */\ngetAccessPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const /** @type {?} */ payload = this.accessToken.split('.')[1];\n            if (payload) {\n                return tools.Base64.decode(payload);\n            }\n        } catch ( /** @type {?} */e) {\n        }\n        return def ? def : null;\n    }\n/**\n * @param {?=} def\n * @return {?}\n */\ngetPreviousAccessPayload(def?: any): string {\n        if (def && typeof def !== 'string') {\n            def = JSON.stringify(def);\n        }\n\n        try {\n            const /** @type {?} */ payload = this.accessTokenPrevious.split('.')[1];\n            if (payload) {\n                return tools.Base64.decode(payload);\n            }\n        } catch ( /** @type {?} */e) {\n        }\n        return def ? def : null;\n    }\n/**\n * @return {?}\n */\nrefreshConnection(): Promise<any> {\n        let /** @type {?} */ code = 0;\n\n        // token not expired : ok\n        if (this.accessToken) {\n            const /** @type {?} */ payload = this.accessToken.split('.')[1];\n            const /** @type {?} */ decoded = tools.Base64.decode(payload);\n            // console.log('new Date().getTime() < JSON.parse(decoded).exp :', (new Date().getTime() / 1000), JSON.parse(decoded).exp);\n            if ((new Date().getTime() / 1000) < JSON.parse(decoded).exp) {\n                return Promise.resolve(code);\n            }\n        }\n\n        // remove expired refreshToken\n        if (this.refreshToken) {\n            const /** @type {?} */ payload = this.refreshToken.split('.')[1];\n            const /** @type {?} */ decoded = tools.Base64.decode(payload);\n            if ((new Date().getTime() / 1000) >= JSON.parse(decoded).exp) {\n                this._storage.remove('refreshToken');\n            }\n        }\n\n        // remove expired accessToken & idToken & store it as Previous one\n        this.accessTokenPrevious = this.accessToken;\n        this._storage.set('accessTokenPrevious', this.accessTokenPrevious);\n        this._storage.remove('accessToken');\n        this._storage.remove('idToken');\n        this.accessToken = null;\n        this.idToken = null;\n\n        // refresh authentication\n        return new Promise((resolve, reject) => {\n            this.getClient().reAuthenticate()\n                .then(user => {\n                    this.setConnection(user);\n                    resolve(user);\n                })\n                .catch(err => {\n                    if (err && err.code === 408) {\n                        code = 408; // no api uri or basic timeout : offline\n                    } else if (err && err.code === 404) {\n                        code = 404; // page not found : offline\n                    } else if (err && err.code === 410) {\n                        code = 403; // token expired or device not sure : need relogin\n                    } else if (err) {\n                        code = 403; // forbidden : need relogin\n                    }\n\n                    resolve(code);\n                });\n        });\n    };\n/**\n * @param {?} clientUser\n * @return {?}\n */\nsetConnection(clientUser: any) {\n\n        // only in private storage\n        if (clientUser.access_token) {\n            this.accessToken = clientUser.access_token;\n            this._storage.set('accessToken', this.accessToken);\n            delete clientUser.access_token;\n\n            const /** @type {?} */ salt = JSON.parse(this.getAccessPayload({salt: ''})).salt;\n            if (salt) {\n                this.setCryptoSalt(salt);\n            }\n        }\n        if (clientUser.id_token) {\n            this.idToken = clientUser.id_token;\n            this._storage.set('idToken', this.idToken);\n            delete clientUser.id_token;\n        }\n        if (clientUser.refresh_token) {\n            this.refreshToken = clientUser.refresh_token;\n            this._storage.set('refreshToken', this.refreshToken);\n            delete clientUser.refresh_token;\n        }\n\n        // expose roles, message\n        // clientUser.roles = self.miappRoles();\n        // clientUser.message = self.miappMessage();\n        clientUser.roles = JSON.parse(this.getIdPayload({roles: []})).roles;\n        clientUser.message = JSON.parse(this.getIdPayload({message: ''})).message;\n        this.setUser(clientUser);\n    };\n/**\n * @param {?} options\n * @return {?}\n */\nsetConnectionOffline(options: ModuleServiceLoginOptionsInterface): void {\n\n        // if (this.user) {\n        //     this.user._id = 'demo';\n        // }\n        // if (this.client) {\n        //     this.client.clientId = 'demo';\n        // }\n        // const tmp = tools.Base64.encode(JSON.stringify({}));\n        // this.accessToken = tmp + '.' + tmp + '.' + tmp;\n\n        this.accessToken = options.accessToken;\n        this.idToken = options.idToken;\n        this.refreshToken = options.refreshToken;\n        this.setUser({\n            roles: JSON.parse(this.getIdPayload({roles: []})).roles,\n            message: JSON.parse(this.getIdPayload({message: ''})).message,\n            _id: 'demo'\n        });\n    }\n/**\n * @param {?=} options\n * @return {?}\n */\ngetEndpoints(options?): Array<string> {\n\n        let /** @type {?} */ ea = ['https://miapp.io/api', 'https://miapp-proxy.herokuapp.com/api'];\n        let /** @type {?} */ filteredEa = [];\n\n        if (!this._sdk.prod) {\n            ea = ['http://localhost:5894/api', 'https://miapp-sandbox.herokuapp.com/api'];\n        }\n\n        if (this.accessToken) {\n            const /** @type {?} */ endpoints = JSON.parse(this.getAccessPayload({endpoints: {}})).endpoints;\n            if (endpoints.length) {\n                ea = [];\n                endpoints.forEach((endpoint) => {\n                    ea.push(endpoint.uri);\n                });\n            }\n        }\n\n        if (this.accessTokenPrevious) {\n            const /** @type {?} */ endpoints = JSON.parse(this.getPreviousAccessPayload({endpoints: {}})).endpoints;\n            if (endpoints.length) {\n                endpoints.forEach((endpoint) => {\n                    if (ea.indexOf(endpoint.uri) < 0) {\n                        ea.push(endpoint.uri);\n                    }\n                });\n            }\n        }\n\n        if (options && options.filter && options.filter === 'theBestOne') {\n            if (this.states && Object.keys(this.states).length) {\n                for (let /** @type {?} */ i = 0; (i < ea.length) && (filteredEa.length === 0); i++) {\n                    const /** @type {?} */ endpoint = ea[i];\n                    if (this.states[endpoint] && this\n                            .states[endpoint].state) {\n                        filteredEa.push(endpoint);\n                    }\n                }\n            } else if (ea.length) {\n                filteredEa = [ea[0]];\n            }\n        } else {\n            filteredEa = ea;\n        }\n\n        return filteredEa;\n    };\n/**\n * @param {?=} options\n * @return {?}\n */\ngetDBs(options?): string[] {\n        if (!this.accessToken) {\n            return [];\n        }\n\n        const /** @type {?} */ random = Math.random() % 2;\n        let /** @type {?} */ dbs = JSON.parse(this.getAccessPayload({dbs: []})).dbs || [];\n\n        // need to synchronize db\n        if (random === 0) {\n            dbs = dbs.sort();\n        } else if (random === 1) {\n            dbs = dbs.reverse();\n        }\n\n        let /** @type {?} */ filteredDBs = [];\n        if (options && options.filter && options.filter === 'theBestOne') {\n            if (this.states && Object.keys(this.states).length) {\n                for (let /** @type {?} */ i = 0; (i < dbs.length) && (filteredDBs.length === 0); i++) {\n                    const /** @type {?} */ endpoint = dbs[i];\n                    if (this.states[endpoint].state) {\n                        filteredDBs.push(endpoint);\n                    }\n                }\n            } else if (dbs.length) {\n                filteredDBs = [dbs[0]];\n            }\n        } else {\n            filteredDBs = dbs;\n        }\n\n        return filteredDBs;\n    };\n/**\n * @return {?}\n */\nverifyConnectionStates(): Promise<any> {\n\n        const /** @type {?} */ currentTime = new Date().getTime();\n\n        // todo need verification ? not yet (cache)\n        // if (Object.keys(this.states).length > 0) {\n        //     const time = this.states[Object.keys(this.states)[0]].time;\n        //     if (currentTime < time) {\n        //         return Promise.resolve();\n        //     }\n        // }\n\n        // verify via GET status on Endpoints & DBs\n        const /** @type {?} */ promises = [];\n        this.states = {};\n        this.endpoints = this.getEndpoints();\n        this.endpoints.forEach((endpoint) => {\n            promises.push(new Promise((resolve, reject) => {\n                // console.log(endpoint + '/status?isok=' + this._sdk.version);\n                new connection.Ajax()\n                    .get({\n                        url: endpoint + '/status?isok=' + this._sdk.version,\n                        headers: {'Content-Type': 'application/json', 'Accept': 'text/json'}\n                    })\n                    .then(data => {\n                        let /** @type {?} */ state = false;\n                        if (data && data.isok) {\n                            state = true;\n                        }\n                        this.states[endpoint] = {state: state, time: currentTime};\n                        resolve();\n                    })\n                    .catch(err => {\n                        this.states[endpoint] = {state: false, time: currentTime};\n                        resolve();\n                    });\n            }));\n        });\n\n        const /** @type {?} */ dbs = this.getDBs();\n        dbs.forEach((dbEndpoint) => {\n            promises.push(new Promise((resolve, reject) => {\n                new connection.Ajax()\n                    .get({\n                        url: dbEndpoint,\n                        headers: {'Content-Type': 'application/json', 'Accept': 'text/json'}\n                    })\n                    .then(data => {\n                        this.states[dbEndpoint] = {state: true, time: currentTime};\n                        resolve();\n                    })\n                    .catch(err => {\n                        this.states[dbEndpoint] = {state: false, time: currentTime};\n                        resolve();\n                    });\n            }));\n        });\n        return Promise.all(promises);\n    };\n\n}\n\nfunction Connection_tsickle_Closure_declarations() {\n/** @type {?} */\nConnection.prototype.miappId;\n/** @type {?} */\nConnection.prototype.miappVersion;\n/** @type {?} */\nConnection.prototype.miappCrypto;\n/** @type {?} */\nConnection.prototype._cryptoSalt;\n/** @type {?} */\nConnection.prototype._client;\n/** @type {?} */\nConnection.prototype._user;\n/** @type {?} */\nConnection.prototype.accessToken;\n/** @type {?} */\nConnection.prototype.idToken;\n/** @type {?} */\nConnection.prototype.refreshToken;\n/** @type {?} */\nConnection.prototype.states;\n/** @type {?} */\nConnection.prototype.endpoints;\n/** @type {?} */\nConnection.prototype.accessTokenPrevious;\n/** @type {?} */\nConnection.prototype._sdk;\n/** @type {?} */\nConnection.prototype._storage;\n}\n\n","// import PouchDB from 'pouchdb';\n// let PouchDB: any;\n\n\nimport PouchDB from 'pouchdb/dist/pouchdb.js';\n\nconst /** @type {?} */ Pouch = window['PouchDB'] || require('pouchdb').default;\n\nexport interface SessionCryptoInterface {\n    obj: Object,\n    method: string\n}\nexport class Session {\npublic dbRecordCount: number;\npublic dbLastSync: number;\nprivate db: PouchDB;\nprivate remoteDb: PouchDB;\nprivate remoteUri: string;\nprivate dbs: Array<string>;\nconstructor() {\n        this.db = null;\n        this.dbRecordCount = 0;\n        this.dbLastSync = null;\n        this.remoteDb = null;\n        this.dbs = [];\n    };\n/**\n * @return {?}\n */\npublic isReady(): boolean {\n        return !!this.db;\n    }\n/**\n * @param {?=} force\n * @return {?}\n */\npublic create(force?: boolean): void {\n\n        if (force || !this.db) {\n            this.dbRecordCount = 0;\n            this.dbLastSync = new Date().getTime();\n            this.db = {};\n            this.db = new Pouch('miapp_db'); // , {adapter: 'websql'} ???\n        }\n    }\n/**\n * @return {?}\n */\npublic destroy(): Promise<void> {\n        const /** @type {?} */ cleanSessionFn = () => {\n            this.dbRecordCount = 0;\n            this.dbLastSync = null;\n        };\n\n        if (!this.db) {\n            cleanSessionFn();\n            return Promise.resolve();\n        }\n\n        if (this.db && !this.db.destroy) {\n            return Promise.reject('miapp.sdk.service._removeSession : DB clean impossible.');\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.destroy((err, info) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    cleanSessionFn();\n                    resolve();\n                }\n            });\n        });\n    };\n/**\n * @param {?} dbs\n * @return {?}\n */\npublic setRemote(dbs: Array<string>): void {\n        this.dbs = dbs;\n    }\n/**\n * @param {?} userId\n * @return {?}\n */\npublic sync(userId: string): Promise<void> {\n\n        if (!this.db) {\n            return Promise.reject({code: 408, msg: 'need db'});\n        }\n        if (!this.dbs || !this.dbs.length) {\n            return Promise.reject({code: 408, msg: 'need db remote'});\n        }\n\n        return new Promise((resolve, reject) => {\n            try {\n\n                if (!this.remoteDb || this.remoteUri !== this.dbs[0]) {\n                    this.remoteUri = this.dbs[0];\n                    this.remoteDb = new Pouch(this.remoteUri);\n                    // todo , {headers: {'Authorization': 'Bearer ' + id_token}});\n                }\n\n                this.db\n                    .sync(this.remoteDb, {\n                        filter: (doc) => {\n                            if (!userId) {\n                                return;\n                            } else if (doc && doc.miappUserId === userId) {\n                                return doc;\n                            }\n                        }\n                    })\n                    .on('complete', (info) => resolve(info))\n                    .on('error', (err) => reject({code: 401, msg: err}))\n                    .on('denied', (err) => reject({code: 403, msg: err}));\n\n            } catch ( /** @type {?} */err) {\n                reject({code: 500, msg: err});\n            }\n        });\n    }\n/**\n * @param {?} data\n * @param {?} _id\n * @param {?} uid\n * @param {?} oid\n * @param {?} ave\n * @param {?=} crypto\n * @return {?}\n */\npublic put(data: any, _id: string, uid: string, oid: string, ave: string, crypto?: SessionCryptoInterface): Promise<string> {\n\n        if (!this.db) {\n            return Promise.reject('need db');\n        }\n\n        if (!data || !_id || !uid || !oid || !ave) {\n            return Promise.reject('need formated data');\n        }\n\n        const /** @type {?} */ dataWithoutIds = JSON.parse(JSON.stringify(data));\n        delete dataWithoutIds._id;\n        delete dataWithoutIds._rev;\n        delete dataWithoutIds.miappUserId;\n        delete dataWithoutIds.miappOrgId;\n        delete dataWithoutIds.miappAppVersion;\n        delete dataWithoutIds.miappData;\n\n        let /** @type {?} */ resultAsString = this.write(this.value(dataWithoutIds));\n        if (crypto) {\n            resultAsString = crypto.obj[crypto.method](resultAsString);\n        }\n        const /** @type {?} */ toStore = {\n            _id: _id,\n            miappUserId: uid,\n            miappOrgId: oid,\n            miappAppVersion: ave,\n            miappData: resultAsString\n        };\n\n        return new Promise((resolve, reject) => {\n            this.db.put(toStore, (err, response) => {\n                if (response && response.ok && response.id && response.rev) {\n                    // data._id = response.id;\n                    // data._rev = response.rev;\n                    this.dbRecordCount++;\n                    resolve(response.id);\n                } else {\n                    reject(err);\n                }\n            });\n        });\n    }\n/**\n * @param {?} data_id\n * @return {?}\n */\npublic remove(data_id: string): Promise<void> {\n\n        if (!this.db) {\n            return Promise.reject('need db');\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then((doc) => {\n                    doc._deleted = true;\n                    return this.db.put(doc);\n                })\n                .then((result) => {\n                    resolve();\n                })\n                .catch((err) => {\n                    reject(err);\n                });\n        });\n    }\n/**\n * @param {?} data_id\n * @param {?=} crypto\n * @return {?}\n */\npublic get(data_id: string, crypto?: SessionCryptoInterface): Promise<any> {\n\n        if (!this.db) {\n            return Promise.reject('need db');\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.get(data_id)\n                .then(row => {\n                    if (!!row && !!row.miappData) {\n                        let /** @type {?} */ data = row.miappData;\n                        if (crypto) {\n                            data = crypto.obj[crypto.method](data);\n                        } else {\n                            data = JSON.parse(data);\n                        }\n                        let /** @type {?} */ result = data;\n                        result._id = row._id;\n                        result._rev = row._rev;\n                        result = JSON.parse(JSON.stringify(result));\n                        resolve(result);\n                    } else {\n                        reject('none');\n                    }\n                })\n                .catch(err => reject(err));\n        });\n    }\n/**\n * @param {?=} crypto\n * @return {?}\n */\npublic getAll(crypto?: SessionCryptoInterface): Promise<any[]> {\n\n        if (!this.db) {\n            return Promise.reject('need db');\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db.allDocs({include_docs: true, descending: true})\n                .then(rows => {\n                    const /** @type {?} */ all = [];\n                    rows.rows.forEach(row => {\n                        if (!!row && !!row.doc.miappData && !!row.doc._id) {\n                            let /** @type {?} */ data = row.doc.miappData;\n                            if (crypto) {\n                                data = crypto.obj[crypto.method](data);\n                            } else {\n                                data = JSON.parse(data);\n                            }\n                            let /** @type {?} */ result = data;\n                            result._id = row.doc._id;\n                            result._rev = row.doc._rev;\n                            result = JSON.parse(JSON.stringify(result));\n                            all.push(result);\n                        } else {\n                            // todo reject('row format pb');\n                        }\n                    });\n                    resolve(all);\n                })\n                .catch(err => reject(err));\n        });\n    }\n/**\n * @return {?}\n */\npublic isEmpty(): Promise<boolean> {\n\n        if (!this.db) {\n            return Promise.reject('need db');\n        }\n\n        return new Promise((resolve, reject) => {\n            this.db\n                .allDocs({\n                    // filter: function (doc) {\n                    //    if (!self.connection.user || !self.connection.user._id) return doc;\n                    //    if (doc.miappUserId === self.connection.user._id) return doc;\n                    // }\n                })\n                .then((response) => {\n                    if (!response) {\n                        reject();\n                    } else {\n                        this.dbRecordCount = response.total_rows;\n                        if (response.total_rows && response.total_rows > 0) {\n                            resolve(false);\n                        } else {\n                            resolve(true);\n                        }\n                    }\n                })\n                .catch((err) => reject(err));\n        });\n    }\n/**\n * @return {?}\n */\npublic info(): Promise<any> {\n        if (!this.db) {\n            return Promise.reject('none');\n        }\n        return this.db.info();\n    }\n/**\n * @param {?} item\n * @return {?}\n */\nprivate write(item: any): string {\n        let /** @type {?} */ value = 'null';\n        const /** @type {?} */ t = typeof(item);\n        if (t === 'undefined') {\n            value = 'null';\n        } else if (value === null) {\n            value = 'null';\n        } else if (t === 'string') {\n            value = JSON.stringify({string: item})\n        } else if (t === 'number') {\n            value = JSON.stringify({number: item});\n        } else if (t === 'boolean') {\n            value = JSON.stringify({bool: item});\n        } else if (t === 'object') {\n            value = JSON.stringify({json: item});\n        }\n        return value;\n    }\n/**\n * @param {?} item\n * @return {?}\n */\nprivate value(item: any): any {\n\n        const /** @type {?} */ t = typeof(item);\n        if (t !== 'object') {\n            return item;\n        }\n\n        if ('string' in item) {\n            return item.string;\n        } else if ('number' in item) {\n            return item.number.valueOf();\n        } else if ('bool' in item) {\n            return item.bool.valueOf();\n        } else if ('json' in item) {\n            return item.json;\n        } else {\n            return item;\n        }\n    }\n}\n\nfunction Session_tsickle_Closure_declarations() {\n/** @type {?} */\nSession.prototype.dbRecordCount;\n/** @type {?} */\nSession.prototype.dbLastSync;\n/** @type {?} */\nSession.prototype.db;\n/** @type {?} */\nSession.prototype.remoteDb;\n/** @type {?} */\nSession.prototype.remoteUri;\n/** @type {?} */\nSession.prototype.dbs;\n}\n\n","// import PouchDB from 'pouchdb';\n// import * as PouchDB from 'pouchdb/dist/pouchdb.js';\n// import PouchDB from 'pouchdb/dist/pouchdb.js';\n\nimport * as version from '../version';\nimport * as tools from '../tools';\nimport * as connection from '../connection';\nimport * as session from '../session';\nimport {LoggerInterface, ModuleServiceInitOptionsInterface, ModuleServiceLoginOptionsInterface, SdkInterface} from './interfaces';\nimport {SessionCryptoInterface} from '../session/session';\n/**\n * usefull only for miapp.io dev team\n */\nexport class InternalService {\nprivate sdk: SdkInterface;\nprivate logger: LoggerInterface;\nprivate promise: PromiseConstructor;\nprivate storage: tools.LocalStorage;\nprivate session: session.Session;\nprivate connection: connection.Connection;\n/**\n * @param {?} logger\n * @param {?} promise\n */\nconstructor(logger: LoggerInterface, promise: PromiseConstructor) {\n\n        this.sdk = {\n            org: 'miapp.io',\n            version: version.version,\n            prod: false\n        };\n        this.logger = {\n            log: () => {\n            }, error: () => {\n            }, warn: () => {\n            }\n        };\n        if (logger) {\n            this.logger = logger;\n        }\n        this.logger.log('miapp.sdk.service : constructor');\n        if (promise) {\n            this.promise = promise;\n        }\n        this.storage = new tools.LocalStorage(window.localStorage, 'miapp.');\n        this.session = new session.Session();\n        this.connection = new connection.Connection(this.sdk, this.storage);\n    }\n/**\n * Init connection & session\n * Check uri\n * Done each app start\n * \n * @param {?} miappId\n * @param {?=} options Optional settings\n * @return {?}\n */\npublic miappInit(miappId: string, options?: ModuleServiceInitOptionsInterface) {\n\n        const /** @type {?} */ self = this;\n        self.logger.log('miapp.sdk.service.miappInit : ', options);\n        if (!miappId) {\n            self.logger.error('miapp.sdk.service.miappInit : bad init');\n            return self.promise.reject('miapp.sdk.service.miappInit : bad init');\n        }\n\n        self.sdk.prod = options ? !!options.prod : true;\n\n        return new self.promise((resolve, reject) => {\n            self.connection.verifyConnectionStates()\n                .then(() => {\n                    self.connection.miappId = miappId;\n                    self.connection.miappVersion = self.sdk.version;\n                    self.connection.miappCrypto = options ? !!options.crypto : false;\n                    const /** @type {?} */ url = self.connection.getEndpoints({filter: 'theBestOne'})[0];\n                    if (!url && self.sdk.prod) {\n                        self.logger.warn('miapp.sdk.service.miappInit : no endpoint is nowly available, switch to dev mode.');\n                        reject('miapp.sdk.service.miappInit: endpoint connection required');\n                    } else {\n                        self.connection.setClient(new connection.Client(self.connection.miappId, url, self.storage, self.sdk));\n                        resolve();\n                    }\n                })\n                .catch((err) => {\n                    self.logger.error('miapp.sdk.service.miappInit : ', err);\n                    reject('miapp.sdk.service.miappInit: ' + err.toString());\n                });\n        });\n    };\n/**\n * Call it if miappIsLogin() === false\n * Erase all (db & storage)\n * \n * @param {?} login\n * @param {?} password\n * @return {?}\n */\npublic miappLogin(login: string, password: string): Promise<any> {\n        const /** @type {?} */ self = this;\n        self.logger.log('miapp.sdk.service.miappLogin');\n        if (!self.connection.isReady()) {\n            return self.promise.reject('miapp.sdk.service.miappLogin : Did you miapp.sdk.service.miappInit() ?');\n        }\n\n        return new self.promise((resolve, reject) => {\n            self._removeAll()\n                .then(() => {\n                    return self.connection.verifyConnectionStates();\n                })\n                .then(() => {\n                    self._createSession();\n                    return self._loginInternal(login, password);\n                })\n                .then((user) => {\n                    self.connection.setConnection(user);\n                    self.session.sync(self.connection.getUserId())\n                        .then(() => resolve(self.connection.getUser()))\n                        .catch((err) => resolve(self.connection.getUser()));\n                })\n                .catch((err) => {\n                    self.logger.error('miapp.sdk.service.miappLogin error: ', err);\n                    reject(err);\n                });\n        });\n    };\n/**\n *\n * @param {?=} options\n * @return {?}\n */\npublic miappLoginInDemoMode(options?: ModuleServiceLoginOptionsInterface) {\n        const /** @type {?} */ self = this;\n\n        // generate one day tokens if not set\n        if (!options || !options.accessToken) {\n\n            const /** @type {?} */ now = new Date();\n            now.setDate(now.getDate() + 1);\n            const /** @type {?} */ tomorrow = now.getTime();\n            const /** @type {?} */ payload = tools.Base64.encode(JSON.stringify({roles: [], message: 'demo', endpoints: {}, dbs: [], exp: tomorrow}));\n            const /** @type {?} */ jwtSign = tools.Base64.encode(JSON.stringify({}));\n            const /** @type {?} */ token = jwtSign + '.' + payload + '.' + jwtSign;\n            options = {\n                accessToken: token,\n                idToken: token,\n                refreshToken: token,\n            };\n        }\n\n        return new self.promise((resolve, reject) => {\n            self._removeAll()\n                .then(() => {\n                    self._createSession();\n                    self.connection.setConnectionOffline(options);\n                    resolve(self.connection.getUser());\n                })\n                .catch((err) => {\n                    self.logger.error('miapp.sdk.service.miappLogin error: ', err);\n                    reject(err);\n                });\n        });\n    };\n/**\n * @return {?}\n */\npublic miappRoles() {\n        return JSON.parse(this.connection.getIdPayload({roles: []})).roles;\n    };\n/**\n * @return {?}\n */\npublic miappMessage() {\n        return JSON.parse(this.connection.getIdPayload({message: ''})).message;\n    };\n/**\n * @return {?}\n */\npublic miappIsLogin() {\n        return this.connection.isLogin();\n    };\n/**\n *\n * @return {?}\n */\npublic miappLogout(): Promise<void> {\n        const /** @type {?} */ self = this;\n        if (!self.connection.getClient()) {\n            return self._removeAll();\n        }\n\n        return self.connection.getClient().logout()\n            .then(() => {\n                return self._removeAll();\n            })\n            .catch(() => {\n                return self._removeAll();\n            });\n    };\n/**\n * Synchronize DB\n * \n * \n * @param {?=} fnInitFirstData a function with db as input and that return promise: call if DB is empty\n * @param {?=} fnInitFirstData_Arg arg to set to fnInitFirstData()\n * @return {?}\n */\npublic miappSync(fnInitFirstData?, fnInitFirstData_Arg?): Promise<void> {\n        const /** @type {?} */ self = this;\n        self.logger.log('miapp.sdk.service.miappSync');\n        if (!self.connection.isReady()) {\n            return self.promise.reject('miapp.sdk.service.miappSync : DB sync impossible. Did you login ?');\n        }\n\n        const /** @type {?} */ firstSync = (self.session.dbLastSync === null);\n\n        return new self.promise((resolve, reject) => {\n\n            self._createSession();\n            self.session.sync(self.connection.getUserId())\n                .then(() => {\n                    self.logger.log('miapp.sdk.service.miappSync resolved');\n                    return self.session.isEmpty();\n                })\n                .catch((err) => {\n                    self.logger.warn('miapp.sdk.service.miappSync warn: ', err);\n                    return self.session.isEmpty();\n                })\n                .then((isEmpty) => {\n                    self.logger.log('miapp.sdk.service.miappSync isEmpty : ', isEmpty, firstSync);\n                    if (isEmpty && firstSync && fnInitFirstData) {\n                        const /** @type {?} */ ret = fnInitFirstData(fnInitFirstData_Arg);\n                        if (ret && ret['catch'] instanceof Function) {\n                            return ret;\n                        }\n                        if (typeof ret === 'string') {\n                            self.logger.log(ret);\n                        }\n                    }\n                    return self.promise.resolve(); // self.connection.getUser());\n                })\n                .then(() => {\n                    self.logger.log('miapp.sdk.service.miappSync fnInitFirstData resolved');\n                    self.session.dbLastSync = new Date().getTime();\n                    return self.session.info();\n                })\n                .then((result: any) => {\n                    self.session.dbRecordCount = 0;\n                    if (result && result.doc_count) {\n                        self.session.dbRecordCount = result.doc_count;\n                    }\n                    self.logger.log('miapp.sdk.service.miappSync _dbRecordCount : ' + self.session.dbRecordCount);\n\n                    return self.connection.refreshConnection();\n                })\n                .then((code) => {\n                    if (code === 403) {\n                        reject({code: code, msg: 'unauthorized (need login)'});\n                    } else {\n                        resolve(); // self.connection.getUser()\n                    }\n                })\n                .catch((err) => {\n                    const /** @type {?} */ errMessage = 'miapp.sdk.service.miappSync err : ' + err.toString();\n                    // self.logger.error(errMessage);\n                    reject({code: 500, msg: errMessage});\n                })\n            ;\n        });\n    };\n/**\n * @param {?} data\n * @return {?}\n */\npublic miappPutInDb(data: any): Promise<string> {\n        const /** @type {?} */ self = this;\n        self.logger.log('miapp.sdk.service.miappPutInDb :', data);\n\n        if (!self.connection.getClientId() || !self.session.isReady()) {\n            return self.promise.reject('miapp.sdk.service.miappPutInDb : ' +\n                'DB put impossible. Need a user logged in.');\n        }\n\n        let /** @type {?} */ _id: string;\n        if (data && typeof data === 'object' && Object.keys(data).indexOf('_id')) {\n            _id = data._id;\n        }\n        if (!_id) {\n            _id = self._generateObjectUniqueId(self.connection.miappId);\n        }\n        let /** @type {?} */ crypto: SessionCryptoInterface;\n        if (self.connection.miappCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'encrypt'\n            }\n        }\n\n        return self.session.put(\n            data,\n            _id,\n            self.connection.getClientId(),\n            self.sdk.org,\n            self.connection.miappVersion,\n            crypto);\n    };\n/**\n * @param {?} data_id\n * @return {?}\n */\npublic miappRemoveInDb(data_id: string): Promise<void> {\n        const /** @type {?} */ self = this;\n        self.logger.log('miapp.sdk.service.miappRemoveInDb ', data_id);\n\n        if (!self.session.isReady()) {\n            return self.promise.reject('miapp.sdk.service.miappRemoveInDb : DB put impossible. ' +\n                'Need a user logged in.');\n        }\n\n        if (!data_id || typeof data_id !== 'string') {\n            return self.promise.reject('miapp.sdk.service.miappRemoveInDb : DB put impossible. ' +\n                'Need the data._id.');\n        }\n\n        return self.session.remove(data_id);\n    };\n/**\n * @param {?} data_id\n * @return {?}\n */\npublic miappFindInDb(data_id: string): Promise<any> {\n        const /** @type {?} */ self = this;\n        if (!self.connection.getClientId() || !self.session.isReady()) {\n            return self.promise.reject('miapp.sdk.service.miappFindInDb : need a user logged in.');\n        }\n\n        let /** @type {?} */ crypto: SessionCryptoInterface;\n        if (self.connection.miappCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.get(data_id, crypto);\n    };\n/**\n * @return {?}\n */\npublic miappFindAllInDb(): Promise<any[]> {\n        const /** @type {?} */ self = this;\n\n        if (!self.connection.getClientId() || !self.session.isReady()) {\n            return self.promise.reject('miapp.sdk.service.miappFindAllInDb : need a user logged in.');\n        }\n\n        let /** @type {?} */ crypto: SessionCryptoInterface;\n        if (self.connection.miappCrypto) {\n            crypto = {\n                obj: self.connection,\n                method: 'decrypt'\n            };\n        }\n\n        return self.session.getAll(crypto);\n    };\n/**\n * Logout then Login\n * \n * @param {?} login\n * @param {?} password\n * @param {?=} updateProperties\n * @return {?}\n */\nprivate _loginInternal(login: string, password: string, updateProperties?: any): Promise<any> {\n        const /** @type {?} */ self = this;\n        self.logger.log('miapp.sdk.service._loginInternal');\n        if (!self.connection.isReady()) {\n            return self.promise.reject('miapp.sdk.service._loginInternal : need init');\n        }\n\n        return new self.promise((resolve, reject) => {\n\n                self.connection.getClient().logout()\n                    .then(msg => {\n                        return self.connection.getClient().login(login, password, updateProperties);\n                    })\n                    .then(loginUser => {\n                        loginUser.email = login;\n                        resolve(loginUser);\n                    })\n                    .catch(err => {\n                        self.logger.error('miapp.sdk.service._loginInternal error : ' + err);\n                        reject(err);\n                    });\n            }\n        );\n    };\n/**\n * @return {?}\n */\nprivate _removeAll(): Promise<void> {\n        this.connection.destroy();\n        return this.session.destroy();\n    };\n/**\n * @return {?}\n */\nprivate _createSession(): void {\n        const /** @type {?} */ dbs = this.connection.getDBs();\n        this.session.create();\n        this.session.setRemote(dbs);\n    };\n/**\n * @param {?=} a\n * @return {?}\n */\nprivate _testPromise(a?): Promise<any> {\n        if (a) {\n            return this.promise.resolve('test promise ok ' + a);\n        }\n        return new this.promise((resolve, reject) => {\n            resolve('test promise ok');\n        });\n    };\nprivate static _srvDataUniqId = 0;\n/**\n * @param {?} appName\n * @param {?=} type\n * @param {?=} name\n * @return {?}\n */\nprivate _generateObjectUniqueId(appName, type?, name?) {\n\n        // return null;\n        const /** @type {?} */ now = new Date();\n        const /** @type {?} */ simpleDate = '' + now.getFullYear() + '' + now.getMonth() + '' + now.getDate()\n            + '' + now.getHours() + '' + now.getMinutes(); // new Date().toISOString();\n        const /** @type {?} */ sequId = ++InternalService._srvDataUniqId;\n        let /** @type {?} */ UId = '';\n        if (appName && appName.charAt(0)) {\n            UId += appName.charAt(0) + '';\n        }\n        if (type && type.length > 3) {\n            UId += type.substring(0, 4);\n        }\n        if (name && name.length > 3) {\n            UId += name.substring(0, 4);\n        }\n        UId += simpleDate + '' + sequId;\n        return UId;\n    }\n\n}\n\nfunction InternalService_tsickle_Closure_declarations() {\n/** @type {?} */\nInternalService._srvDataUniqId;\n/** @type {?} */\nInternalService.prototype.sdk;\n/** @type {?} */\nInternalService.prototype.logger;\n/** @type {?} */\nInternalService.prototype.promise;\n/** @type {?} */\nInternalService.prototype.storage;\n/** @type {?} */\nInternalService.prototype.session;\n/** @type {?} */\nInternalService.prototype.connection;\n}\n\n","import {Injectable} from '@angular/core';\nimport {LoggerInterface, ModuleServiceInterface, ModuleServiceInitOptionsInterface, ModuleServiceLoginOptionsInterface} from './interfaces';\nimport {InternalService} from './internal.service';\n/**\n * Angular2+ MiappService\n * \\@class MiappService\n * @see ModuleServiceInterface\n * \n */\nexport class MiappService implements ModuleServiceInterface {\nprivate logger: LoggerInterface;\nprivate miappService: any = null;\nprivate promise: any = null;\nconstructor() {\n        this.logger = new LoggerService();\n        this.promise = Promise;\n        this.miappService = null;\n        // let pouchdbRequired = PouchDB;\n        // pouchdbRequired.error();\n    };\n/**\n * @param {?} miappId\n * @param {?=} options\n * @return {?}\n */\npublic init(miappId, options?: ModuleServiceInitOptionsInterface): Promise<boolean> {\n        if (!this.miappService) {\n            this.miappService = new InternalService(this.logger, this.promise);\n        }\n        /*\n        if (options && options.forcedEndpoint) {\n            this.miappService.setAuthEndpoint(options.forcedEndpoint);\n        }\n        if (options && options.forcedDBEndpoint) {\n            this.miappService.setDBEndpoint(options.forcedDBEndpoint);\n        }*/\n        return this.miappService.miappInit(miappId, options);\n    };\n/**\n * @param {?} login\n * @param {?} password\n * @return {?}\n */\npublic login(login, password): Promise<any> {\n        if (!this.miappService) {\n            return this.promise.reject('miapp.sdk.angular2.login : not initialized.');\n        }\n        return this.miappService.miappLogin(login, password);\n    };\n/**\n * @param {?=} options\n * @return {?}\n */\npublic loginAsDemo(options?: ModuleServiceLoginOptionsInterface): Promise<any> {\n        if (!this.miappService) {\n            return this.promise.reject('miapp.sdk.angular2.loginAsDemo : not initialized.');\n        }\n        return this.miappService.miappLoginInDemoMode(options);\n    };\n/**\n * @return {?}\n */\npublic isLoggedIn(): boolean {\n        if (!this.miappService) {\n            return this.promise.reject('miapp.sdk.angular2.isLoggedIn : not initialized.');\n        }\n        return this.miappService.miappIsLogin();\n    };\n/**\n * @return {?}\n */\npublic getRoles(): Array<string> {\n        if (!this.miappService) {\n            return [];\n        }\n        return this.miappService.miappRoles();\n    };\n/**\n * @return {?}\n */\npublic getEndpoints(): Array<string> {\n        if (!this.miappService) {\n            return [];\n        }\n        return this.miappService.getEndpoints();\n    };\n/**\n * @return {?}\n */\npublic logout(): Promise<void> {\n        if (!this.miappService) {\n            return this.promise.reject('miapp.sdk.angular2.logout : not initialized.');\n        }\n        return this.miappService.miappLogout();\n    };\n/**\n * \n * Synchronize DB\n * \\@memberof miapp.angularService\n * \n * \\@example \n *  let initDb = function() {\n *     this.miappService.put('my first row');\n *  };\n *  this.miappService.sync(initDb)\n *  .then(user => ...)\n *  .catch(err => ...)\n * \n * @param {?=} fnInitFirstData  a function with db as input and that return promise: call if DB is empty\n * @return {?}\n */\npublic sync(fnInitFirstData?): Promise<any> {\n        if (!this.miappService) {\n            return this.promise.reject('miapp.sdk.angular2.sync : not initialized.');\n        }\n        return this.miappService.miappSync(fnInitFirstData, this);\n    };\n/**\n * Store data in your session\n * \n * @param {?} data\n * @return {?}\n */\npublic put(data: any): Promise<any> {\n        if (!this.miappService) {\n            return this.promise.reject('miapp.sdk.angular2.put : not initialized.');\n        }\n        return this.miappService.miappPutInDb(data);\n    };\n/**\n * Find object Id and remove it from your session\n * \n * @param {?} id\n * @return {?}\n */\npublic remove(id: string): Promise<any> {\n        if (!this.miappService) {\n            return this.promise.reject('miapp.sdk.angular2.remove : not initialized.');\n        }\n        return this.miappService.miappRemoveInDb(id);\n    };\n/**\n * Find\n * @param {?} id\n * @return {?}\n */\npublic find(id: string): Promise<any> {\n        if (!this.miappService) {\n            return this.promise.reject('miapp.sdk.angular2.find : not initialized.');\n        }\n        return this.miappService.miappFindInDb(id);\n    };\n/**\n * @return {?}\n */\npublic findAll(): Promise<any> {\n        if (!this.miappService) {\n            return this.promise.reject('miapp.sdk.angular2.findAll : not initialized.');\n        }\n        return this.miappService.miappFindAllInDb();\n    };\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MiappService_tsickle_Closure_declarations() {\n/** @type {?} */\nMiappService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMiappService.ctorParameters;\n/** @type {?} */\nMiappService.prototype.logger;\n/** @type {?} */\nMiappService.prototype.miappService;\n/** @type {?} */\nMiappService.prototype.promise;\n}\n\nexport class LoggerService implements LoggerInterface {\n/**\n * @param {?} message\n * @return {?}\n */\nlog(message: string) {\n        // console.log(message);\n    }\n/**\n * @param {?} message\n * @return {?}\n */\nerror(message: string) {\n        console.error(message);\n    }\n/**\n * @param {?} message\n * @return {?}\n */\nwarn(message: string) {\n        console.warn(message);\n    }\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MiappService} from './angular.service';\n/**\n * `NgModule` which provides associated services.\n * \n * ...\n * \n * \\@stable\n */\nexport class MiappModule {\nconstructor() {\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule\n    ],\n    declarations: [],\n\n    exports: [],\n\n    providers: [MiappService]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MiappModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMiappModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMiappModule.ctorParameters;\n}\n\n\n\n/**\n * todo doc on module\n * module MiappModule\n *\n * exemple\n *      // ... after install :\n *      // $ npm install miappio-sdk\n *      // then init your app.js & use it in your services\n *\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n *\n * <script src=\"https://gist.github.com/mlefree/ad64f7f6a345856f6bf45fd59ca8db46.js\"></script>\n */\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["version","Base64","encode","input","btoa","encodeURIComponent","replace","match","p1","String","fromCharCode","parseInt","decode","decodeURIComponent","atob","split","map","c","charCodeAt","toString","slice","join","LocalStorage","storageService","storageKey","this","storage","window","localStorage","Error","prototype","set","key","value","checkKey","t","JSON","stringify","string","number","bool","TypeError","json","setItem","get","def","item","getItem","parse","valueOf","remove","existed","removeItem","clear","length","size","foreach","f","context","n","i","call","Xor","encrypt","result","keyCharAt","decrypt","Math","floor","XHRPromise","DEFAULT_CONTENT_TYPE","send","options","defaults","_this","method","data","headers","async","username","password","withCredentials","Object","assign","Promise","resolve","reject","e","header","ref","xhr","XMLHttpRequest","url","_xhr","onload","responseText","_detachWindowUnload","_getResponseText","_error","_handleError","_getResponseUrl","status","statusText","_getHeaders","onerror","ontimeout","onabort","_attachWindowUnload","open","hasOwnProperty","setRequestHeader","getXHR","_unloadHandler","_handleWindowUnload","bind","attachEvent","detachEvent","_parseHeaders","getAllResponseHeaders","getResponseHeader","responseURL","test","reason","abort","trim","str","isArray","arg","forEach","list","iterator","forEachArray","forEachString","forEachObject","array","len","charAt","object","k","row","index","indexOf","toLowerCase","push","Ajax","post","args","opt","then","res","put","delete","Client","appId","URI","sdk","uuid","random","info","navigator","appName","appVersion","userAgent","setClientUuid","setClientInfo","refreshToken","clientId","setClientId","clientUuid","clientInfo","setRefreshToken","login","updateProperties","console","error","code","msg","urlLogin","dataLogin","name","email","Content-Type","Accept","createdUser","_id","urlToken","dataToken","grant_type","client_id","client_secret","client_udid","client_info","audience","scope","reAuthenticate","refresh_token","refresh_extra","refreshCount","logout","token","isReady","Connection","_sdk","_storage","_client","_user","_cryptoSalt","accessToken","accessTokenPrevious","idToken","states","endpoints","destroy","setClient","client","_name","getIdPayload","setUser","user","getUser","getUserId","getClient","setCryptoSalt","miappCrypto","tools.Xor","decrypted","err","isLogin","exp","payload","decoded","tools.Base64","Date","getTime","getClientId","getAccessPayload","getPreviousAccessPayload","refreshConnection","setConnection","catch","clientUser","access_token","salt","id_token","roles","message","setConnectionOffline","getEndpoints","ea","filteredEa","prod","endpoint","uri","filter","keys","state","getDBs","dbs","sort","reverse","filteredDBs","verifyConnectionStates","currentTime","promises","connection.Ajax","isok","time","dbEndpoint","all","Pouch","require","default","Session","db","dbRecordCount","dbLastSync","remoteDb","create","force","cleanSessionFn","setRemote","sync","userId","remoteUri","doc","miappUserId","on","uid","oid","ave","crypto","dataWithoutIds","_rev","miappOrgId","miappAppVersion","miappData","resultAsString","write","obj","toStore","response","ok","id","rev","data_id","_deleted","getAll","allDocs","include_docs","descending","rows","isEmpty","total_rows","InternalService","logger","promise","org","version.version","log","warn","tools.LocalStorage","session","session.Session","connection","connection.Connection","miappInit","miappId","self","miappVersion","connection.Client","miappLogin","_removeAll","_createSession","_loginInternal","miappLoginInDemoMode","now","setDate","getDate","tomorrow","jwtSign","miappRoles","miappMessage","miappIsLogin","miappLogout","miappSync","fnInitFirstData","fnInitFirstData_Arg","firstSync","ret","Function","doc_count","errMessage","miappPutInDb","_generateObjectUniqueId","miappRemoveInDb","miappFindInDb","miappFindAllInDb","loginUser","_testPromise","a","type","simpleDate","getFullYear","getMonth","getHours","getMinutes","sequId","_srvDataUniqId","UId","substring","MiappService","miappService","LoggerService","init","loginAsDemo","isLoggedIn","getRoles","find","findAll","decorators","Injectable","ctorParameters","MiappModule","NgModule","imports","CommonModule","declarations","exports","providers"],"mappings":"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"}
